const { Client } = require("pg");

const client = new Client({
  host: "localhost",
  port: 5432,
  user: "usertiktoc",
  password: "tiktocpass",
  database: "tiktocdb"
});

const createAndInsertData = async () => {
  try {
    // Conectar a la base de datos
    await client.connect();

    await client.query(`
            DO $$ 
            BEGIN
              -- Verificar si el tipo question_type ya existe antes de crearlo
              IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'question_type') THEN
                CREATE TYPE question_type AS ENUM ('multiple_choice', 'fill_in_the_blank', 'video_question');
              END IF;
          
              -- Verificar si el tipo transaction_type ya existe antes de crearlo
              IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'transaction_type') THEN
                CREATE TYPE transaction_type AS ENUM ('earn', 'spend');
              END IF;
          
              -- Verificar si el tipo status_type ya existe antes de crearlo
              IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'status_type') THEN
                CREATE TYPE status_type AS ENUM ('pending', 'completed', 'failed');
              END IF;
          
              -- Verificar si el tipo purchase_type ya existe antes de crearlo
              IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'purchase_type') THEN
                CREATE TYPE purchase_type AS ENUM ('content', 'subscription', 'item', 'promotion');
              END IF;
          
              -- Verificar si el tipo related_table_type ya existe antes de crearlo
              IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'related_table_type') THEN
                CREATE TYPE related_table_type AS ENUM ('watch_providers', 'subscriptions', 'items', 'promotions');
              END IF;
          
              -- Verificar si el tipo watch_provider_transaction_type ya existe antes de crearlo
              IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'watch_provider_transaction_type') THEN
                CREATE TYPE watch_provider_transaction_type AS ENUM ('purchase', 'unlock', 'view');
              END IF;
          
              -- Verificar si el tipo watch_provider_status ya existe antes de crearlo
              IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'watch_provider_status') THEN
                CREATE TYPE watch_provider_status AS ENUM ('pending', 'completed', 'cancelled');
              END IF;
          
              -- Verificar si el tipo gender_enum ya existe antes de crearlo
              IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'gender_enum') THEN
                CREATE TYPE gender_enum AS ENUM ('male', 'female', 'non-binary', 'prefer_not_to_say');
              END IF;
          
              -- Verificar si el tipo watch_provider_type ya existe antes de crearlo
              IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'watch_provider_type') THEN
                CREATE TYPE watch_provider_type AS ENUM ('buy', 'rent', 'flatrate', 'free');
              END IF;
            END $$;
          `);

    // Crear tablas
    await client.query(`
      CREATE TABLE IF NOT EXISTS "Movies" (
        "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        "title" varchar NOT NULL,
        "original_title" varchar,
        "overview" text,
        "tagline" varchar,
        "release_date" date,
        "runtime" integer,
        "budget" decimal,
        "revenue" decimal,
        "status" varchar,
        "popularity" decimal,
        "vote_average" decimal,
        "vote_count" integer,
        "poster_path" varchar,
        "backdrop_path" varchar,
        "homepage" varchar,
        "imdb_id" varchar,
        "original_language" varchar
        );
    `);

    await client.query(`
        CREATE TABLE IF NOT EXISTS "Genres" (
        "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        "name" varchar NOT NULL
        );
      `);

    await client.query(`
        CREATE TABLE IF NOT EXISTS "Movie_Genres" (
        "movie_id" integer,
        "genre_id" integer
        );
      `);

    await client.query(`
        CREATE TABLE IF NOT EXISTS "Production_Companies" (
        "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        "name" varchar NOT NULL,
        "logo_path" varchar,
        "origin_country" varchar
        );
      `);

    await client.query(`
        CREATE TABLE IF NOT EXISTS "Movie_Production_Companies" (
        "movie_id" integer,
        "company_id" integer
        );
      `);

    await client.query(`
        CREATE TABLE IF NOT EXISTS "Production_Countries" (
        "iso_3166_1" char(2) PRIMARY KEY,
        "name" varchar
        );
      `);

    await client.query(`
        CREATE TABLE IF NOT EXISTS "Movie_Production_Countries" (
        "movie_id" integer,
        "country_iso" char(2)
        );
      `);

    await client.query(`
        CREATE TABLE IF NOT EXISTS "Spoken_Languages" (
        "iso_639_1" char(2) PRIMARY KEY,
        "name" varchar,
        "english_name" varchar
        );
      `);

    await client.query(`
        CREATE TABLE IF NOT EXISTS "Movie_Spoken_Languages" (
        "movie_id" integer,
        "language_iso" char(2)
        );
      `);

    await client.query(`
        CREATE TABLE IF NOT EXISTS "Images" (
        "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        "movie_id" integer,
        "file_path" varchar,
        "aspect_ratio" decimal,
        "height" integer,
        "width" integer,
        "vote_average" decimal,
        "vote_count" integer
        );
      `);

    await client.query(`
        CREATE TABLE IF NOT EXISTS "Recommendations" (
        "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        "movie_id" integer
        );  
      `);

    await client.query(`
        CREATE TABLE IF NOT EXISTS "Keywords" (
        "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        "name" varchar NOT NULL
        );
      `);

    await client.query(`
        CREATE TABLE IF NOT EXISTS "Movie_Keywords" (
        "movie_id" integer,
        "keyword_id" integer
        );
      `);

    await client.query(`
      CREATE TABLE IF NOT EXISTS "External_Ids" (
        "movie_id" integer PRIMARY KEY,
        "imdb_id" varchar,
        "wikidata_id" varchar,
        "facebook_id" varchar,
        "instagram_id" varchar,
        "twitter_id" varchar
        );  
      `);

    await client.query(`
        CREATE TABLE IF NOT EXISTS "Watch_Providers" (
        "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        "movie_id" integer,
        "country_iso" char(2),
        "provider_id" integer,
        "type" watch_provider_type,
        "display_priority" integer,
        "link" varchar,
        "cost" integer DEFAULT 0
        );
      `);

    await client.query(`
        CREATE TABLE IF NOT EXISTS "Providers" (
        "id" integer PRIMARY KEY,
        "provider_name" varchar UNIQUE NOT NULL,
        "logo_path" varchar
        );
      `);

    await client.query(`
        CREATE TABLE IF NOT EXISTS "Watch_Provider_Qualities" (
        "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        "watch_provider_id" integer,
        "quality" varchar
        );
      `);

    await client.query(`
        CREATE TABLE IF NOT EXISTS "Countries" (
        "iso_3166_1" char(2) PRIMARY KEY,
        "name" varchar
        );
      `);

    await client.query(`
        CREATE TABLE IF NOT EXISTS "Videos" (
          "id" varchar PRIMARY KEY,
          "iso_639_1" varchar,
          "iso_3166_1" varchar,
          "name" varchar,
          "key" varchar,
          "site" varchar,
          "size" varchar,
          "type" varchar,
          "official" boolean,
          "published_at" timestamp,
          "description" text,
          "is_ads" boolean,
          "play_count" int,
          "comment_count" int,
          "digg_count" int,
          "share_count" int,
          "download_count" int,
          "collect_count" int,
          "duration" int,
          "cover_url" varchar,
          "dynamic_cover_url" varchar,
          "author_id" varchar,
          "music_id" varchar,
          "detail_id" int
        );
      `);

    await client.query(`
        CREATE TABLE IF NOT EXISTS "Music" (
          "id" varchar PRIMARY KEY,
          "title" varchar,
          "author" varchar,
          "album" varchar,
          "play_url" varchar,
          "cover_large_url" varchar,
          "cover_medium_url" varchar,
          "cover_thumb_url" varchar,
          "duration" int,
          "is_commerce_music" boolean,
          "is_original_sound" boolean,
          "is_author_artist" boolean
        );
      `);

    await client.query(`
        CREATE TABLE IF NOT EXISTS "Hashtags" (
          "id" serial PRIMARY KEY,
          "video_id" varchar,
          "hashtag" varchar
        );
      `);

    await client.query(`
        CREATE TABLE IF NOT EXISTS "Authors" (
          "uid" varchar PRIMARY KEY,
          "username" varchar,
          "nickname" varchar,
          "signature" text,
          "region" varchar,
          "avatar_url" varchar,
          "profile_url" varchar
        );
      `);

    await client.query(`
        CREATE TABLE IF NOT EXISTS "people" (
          "id" integer PRIMARY KEY,
          "name" varchar NOT NULL,
          "biography" text,
          "birthday" date,
          "deathday" date,
          "gender" integer,
          "homepage" varchar,
          "imdb_id" varchar,
          "known_for_department" varchar,
          "place_of_birth" varchar,
          "popularity" float,
          "profile_path" varchar
        );
      `);

    await client.query(`
        CREATE TABLE IF NOT EXISTS "Cast" (
          "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
          "actor_id" integer,
          "movie_id" integer,
          "character" varchar,
          "cast_id" integer,
          "credit_id" varchar,
          "order" integer,
          "job" varchar
        );
      `);

    await client.query(`
        CREATE TABLE IF NOT EXISTS "external_ids" (
          "id" integer PRIMARY KEY,
          "people_id" integer,
          "freebase_mid" varchar,
          "freebase_id" varchar,
          "imdb_id" varchar,
          "tvrage_id" integer,
          "wikidata_id" varchar,
          "facebook_id" varchar,
          "instagram_id" varchar,
          "tiktok_id" varchar,
          "twitter_id" varchar,
          "youtube_id" varchar
        );
      `);

    await client.query(`
        CREATE TABLE IF NOT EXISTS "image" (
          "id" integer PRIMARY KEY,
          "actor_id" integer,
          "file_path" varchar,
          "aspect_ratio" float,
          "height" integer,
          "width" integer,
          "vote_average" float,
          "vote_count" integer
        );
      `);

    await client.query(`
        CREATE TABLE IF NOT EXISTS "translation" (
          "id" integer PRIMARY KEY,
          "actor_id" integer,
          "iso_3166_1" varchar,
          "iso_639_1" varchar,
          "name" varchar,
          "english_name" varchar,
          "biography" text
        );
      `);

    await client.query(`
        CREATE TABLE IF NOT EXISTS "users" (
          "id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
          "email" varchar UNIQUE,
          "phone_number" varchar UNIQUE,
          "password_hash" varchar,
          "otp_code" varchar,
          "otp_expiration" timestamp,
          "created_at" timestamp DEFAULT (now()),
          "updated_at" timestamp DEFAULT (now()),
          "last_login" timestamp,
          "is_active" boolean DEFAULT true,
          "is_verified" boolean DEFAULT false
        );
      `);

    await client.query(`
        CREATE TABLE IF NOT EXISTS "user_auth_providers" (
          "id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
          "user_id" int,
          "provider" varchar NOT NULL,
          "provider_id" varchar NOT NULL,
          "created_at" timestamp DEFAULT (now()),
          "updated_at" timestamp DEFAULT (now())
        );
      `);

    await client.query(`
        CREATE TABLE IF NOT EXISTS "user_profiles" (
          "id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
          "user_id" int UNIQUE,
          "username" varchar UNIQUE NOT NULL,
          "birth_date" date,
          "country" varchar,
          "profile_picture" varchar,
          "gender" gender_enum,
          "level" varchar DEFAULT 'Principiante',
          "total_surveys" int DEFAULT 0,
          "total_coins" integer DEFAULT 0,
          "created_at" timestamp DEFAULT (now()),
          "updated_at" timestamp DEFAULT (now())
        );
      `);

    await client.query(`
        CREATE TABLE IF NOT EXISTS "sessions" (
          "id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
          "user_id" int,
          "session_token" varchar UNIQUE NOT NULL,
          "ip_address" varchar,
          "user_agent" varchar,
          "created_at" timestamp DEFAULT (now()),
          "expires_at" timestamp,
          "is_active" boolean DEFAULT true
        );
      `);

    await client.query(`
        CREATE TABLE IF NOT EXISTS "activities" (
          "id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
          "user_id" int,
          "session_id" int,
          "action" varchar,
          "description" text,
          "created_at" timestamp DEFAULT (now())
        );
      `);

    await client.query(`
        CREATE TABLE IF NOT EXISTS "user_roles" (
          "id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
          "user_id" int,
          "role" varchar NOT NULL,
          "assigned_at" timestamp DEFAULT (now()),
          "is_active" boolean DEFAULT true
        );
      `);

    await client.query(`
        CREATE TABLE IF NOT EXISTS "login_attempts" (
          "id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
          "user_id" int,
          "ip_address" varchar,
          "user_agent" varchar,
          "success" boolean,
          "created_at" timestamp DEFAULT (now())
        );
      `);

    await client.query(`
        CREATE TABLE IF NOT EXISTS "Transactions" (
          "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
          "user_id" integer,
          "transaction_type" transaction_type,
          "amount" integer,
          "description" varchar,
          "transaction_date" timestamp DEFAULT (current_timestamp),
          "status" status_type DEFAULT 'completed',
          "purchase_type" purchase_type,
          "related_id" integer,
          "related_table" related_table_type
        );
      `);

    await client.query(`
        CREATE TABLE IF NOT EXISTS "Watch_Provider_Transactions" (
          "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
          "user_id" integer,
          "watch_provider_id" integer,
          "transaction_type" watch_provider_transaction_type,
          "cost" integer,
          "amount_spent" integer DEFAULT 0,
          "transaction_date" timestamp DEFAULT (current_timestamp),
          "status" watch_provider_status DEFAULT 'pending'
        );
      `);

    await client.query(`
        CREATE TABLE IF NOT EXISTS "Video_Engagement" (
          "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
          "user_id" integer,
          "video_id" integer,
          "liked" boolean DEFAULT false,
          "total_views" integer DEFAULT 0,
          "total_time_watched" integer DEFAULT 0,
          "total_shares" integer DEFAULT 0,
          "last_viewed" timestamp
        );
      `);

    await client.query(`
        CREATE TABLE IF NOT EXISTS "Video_Comments" (
          "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
          "engagement_id" integer,
          "comment" text,
          "comment_date" timestamp DEFAULT (current_timestamp)
        );
      `);

    await client.query(`
        CREATE TABLE IF NOT EXISTS "Video_Views" (
          "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
          "user_id" integer,
          "video_id" integer,
          "view_date" timestamp DEFAULT (current_timestamp),
          "time_watched" integer
        );
      `);

    await client.query(`
        CREATE TABLE IF NOT EXISTS "surveys" (
          "id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
          "movie_id" int NOT NULL,
          "title" varchar NOT NULL,
          "reward" int DEFAULT 0,
          "created_at" timestamp DEFAULT (now())
        );
      `);

    await client.query(`
        CREATE TABLE IF NOT EXISTS "survey_attempts" (
          "id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
          "user_id" int,
          "survey_id" int,
          "completed" boolean DEFAULT false,
          "reward_earned" int DEFAULT 0,
          "created_at" timestamp DEFAULT (now())
        );
      `);

    await client.query(`
        CREATE TABLE IF NOT EXISTS "questions" (
          "id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
          "survey_id" int NOT NULL,
          "type" question_type NOT NULL,
          "content" text NOT NULL,
          "media" varchar,
          "correct_option" text NOT NULL
        );
      `);

    await client.query(`
        CREATE TABLE IF NOT EXISTS "options" (
          "id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
          "question_id" int NOT NULL,
          "content" text NOT NULL,
          "is_correct" boolean DEFAULT false
        );
      `);

    await client.query(`
        DO $$ 
        BEGIN
          -- Verificar si el índice "Movies_release_date_idx" ya existe antes de crearlo
          IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'Movies_release_date_idx') THEN
            CREATE INDEX "Movies_release_date_idx" ON "Movies" ("release_date");
          END IF;
      
          -- Verificar si el índice "Movies_popularity_idx" ya existe antes de crearlo
          IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'Movies_popularity_idx') THEN
            CREATE INDEX "Movies_popularity_idx" ON "Movies" ("popularity");
          END IF;
      
          -- Verificar si el índice "Movies_vote_average_idx" ya existe antes de crearlo
          IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'Movies_vote_average_idx') THEN
            CREATE INDEX "Movies_vote_average_idx" ON "Movies" ("vote_average");
          END IF;
      
          -- Verificar si el índice "Genres_name_idx" ya existe antes de crearlo
          IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'Genres_name_idx') THEN
            CREATE UNIQUE INDEX "Genres_name_idx" ON "Genres" ("name");
          END IF;
      
          -- Verificar si el índice "Movie_Genres_movie_id_genre_id_idx" ya existe antes de crearlo
          IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'Movie_Genres_movie_id_genre_id_idx') THEN
            CREATE UNIQUE INDEX "Movie_Genres_movie_id_genre_id_idx" ON "Movie_Genres" ("movie_id", "genre_id");
          END IF;
      
          -- Verificar si el índice "Production_Companies_name_idx" ya existe antes de crearlo
          IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'Production_Companies_name_idx') THEN
            CREATE UNIQUE INDEX "Production_Companies_name_idx" ON "Production_Companies" ("name");
          END IF;
      
          -- Verificar si el índice "Movie_Production_Companies_movie_id_company_id_idx" ya existe antes de crearlo
          IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'Movie_Production_Companies_movie_id_company_id_idx') THEN
            CREATE UNIQUE INDEX "Movie_Production_Companies_movie_id_company_id_idx" ON "Movie_Production_Companies" ("movie_id", "company_id");
          END IF;
      
          -- Verificar si el índice "Production_Countries_name_idx" ya existe antes de crearlo
          IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'Production_Countries_name_idx') THEN
            CREATE UNIQUE INDEX "Production_Countries_name_idx" ON "Production_Countries" ("name");
          END IF;
      
          -- Verificar si el índice "Movie_Production_Countries_movie_id_country_iso_idx" ya existe antes de crearlo
          IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'Movie_Production_Countries_movie_id_country_iso_idx') THEN
            CREATE UNIQUE INDEX "Movie_Production_Countries_movie_id_country_iso_idx" ON "Movie_Production_Countries" ("movie_id", "country_iso");
          END IF;
      
          -- Verificar si el índice "Spoken_Languages_name_idx" ya existe antes de crearlo
          IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'Spoken_Languages_name_idx') THEN
            CREATE UNIQUE INDEX "Spoken_Languages_name_idx" ON "Spoken_Languages" ("name");
          END IF;
      
          -- Verificar si el índice "Movie_Spoken_Languages_movie_id_language_iso_idx" ya existe antes de crearlo
          IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'Movie_Spoken_Languages_movie_id_language_iso_idx') THEN
            CREATE UNIQUE INDEX "Movie_Spoken_Languages_movie_id_language_iso_idx" ON "Movie_Spoken_Languages" ("movie_id", "language_iso");
          END IF;
      
          -- Verificar si el índice "Images_movie_id_idx" ya existe antes de crearlo
          IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'Images_movie_id_idx') THEN
            CREATE INDEX "Images_movie_id_idx" ON "Images" ("movie_id");
          END IF;
      
          -- Verificar si el índice "Recommendations_movie_id_idx" ya existe antes de crearlo
          IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'Recommendations_movie_id_idx') THEN
            CREATE INDEX "Recommendations_movie_id_idx" ON "Recommendations" ("movie_id");
          END IF;
      
          -- Verificar si el índice "Keywords_name_idx" ya existe antes de crearlo
          IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'Keywords_name_idx') THEN
            CREATE UNIQUE INDEX "Keywords_name_idx" ON "Keywords" ("name");
          END IF;
      
          -- Verificar si el índice "Movie_Keywords_movie_id_keyword_id_idx" ya existe antes de crearlo
          IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'Movie_Keywords_movie_id_keyword_id_idx') THEN
            CREATE UNIQUE INDEX "Movie_Keywords_movie_id_keyword_id_idx" ON "Movie_Keywords" ("movie_id", "keyword_id");
          END IF;
      
          -- Verificar si el índice "Watch_Providers_movie_id_idx" ya existe antes de crearlo
          IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'Watch_Providers_movie_id_idx') THEN
            CREATE INDEX "Watch_Providers_movie_id_idx" ON "Watch_Providers" ("movie_id");
          END IF;
      
          -- Verificar si el índice "Watch_Providers_country_iso_idx" ya existe antes de crearlo
          IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'Watch_Providers_country_iso_idx') THEN
            CREATE INDEX "Watch_Providers_country_iso_idx" ON "Watch_Providers" ("country_iso");
          END IF;
      
          -- Verificar si el índice "Watch_Providers_provider_id_idx" ya existe antes de crearlo
          IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'Watch_Providers_provider_id_idx') THEN
            CREATE INDEX "Watch_Providers_provider_id_idx" ON "Watch_Providers" ("provider_id");
          END IF;
      
          -- Verificar si el índice "Watch_Provider_Qualities_watch_provider_id_quality_idx" ya existe antes de crearlo
          IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'Watch_Provider_Qualities_watch_provider_id_quality_idx') THEN
            CREATE INDEX "Watch_Provider_Qualities_watch_provider_id_quality_idx" ON "Watch_Provider_Qualities" ("watch_provider_id", "quality");
          END IF;
      
          -- Verificar si el índice "Countries_name_idx" ya existe antes de crearlo
          IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'Countries_name_idx') THEN
            CREATE UNIQUE INDEX "Countries_name_idx" ON "Countries" ("name");
          END IF;
      
          -- Verificar si el índice "Videos_author_id_idx" ya existe antes de crearlo
          IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'Videos_author_id_idx') THEN
            CREATE INDEX "Videos_author_id_idx" ON "Videos" ("author_id");
          END IF;
      
          -- Verificar si el índice "Videos_music_id_idx" ya existe antes de crearlo
          IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'Videos_music_id_idx') THEN
            CREATE INDEX "Videos_music_id_idx" ON "Videos" ("music_id");
          END IF;
      
          -- Verificar si el índice "Videos_detail_id_idx" ya existe antes de crearlo
          IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'Videos_detail_id_idx') THEN
            CREATE INDEX "Videos_detail_id_idx" ON "Videos" ("detail_id");
          END IF;
      
          -- Verificar si el índice "Music_title_idx" ya existe antes de crearlo
          IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'Music_title_idx') THEN
            CREATE UNIQUE INDEX "Music_title_idx" ON "Music" ("title");
          END IF;

          -- Índices para Hashtags
        IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'Hashtags_video_id_idx') THEN
        CREATE INDEX "Hashtags_video_id_idx" ON "Hashtags" ("video_id");
        END IF;

        IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'Hashtags_hashtag_idx') THEN
        CREATE INDEX "Hashtags_hashtag_idx" ON "Hashtags" ("hashtag");
        END IF;

        -- Índices para Authors
        IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'Authors_username_idx') THEN
        CREATE UNIQUE INDEX "Authors_username_idx" ON "Authors" ("username");
        END IF;

        -- Índices para people
        IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'people_name_idx') THEN
        CREATE INDEX "people_name_idx" ON "people" ("name");
        END IF;

        IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'people_imdb_id_idx') THEN
        CREATE UNIQUE INDEX "people_imdb_id_idx" ON "people" ("imdb_id");
        END IF;

        -- Índices para Cast
        IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'Cast_actor_id_movie_id_idx') THEN
        CREATE INDEX "Cast_actor_id_movie_id_idx" ON "Cast" ("actor_id", "movie_id");
        END IF;

        -- Índices para external_ids
        IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'external_ids_people_id_idx') THEN
        CREATE INDEX "external_ids_people_id_idx" ON "external_ids" ("people_id");
        END IF;

        IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'external_ids_imdb_id_idx') THEN
        CREATE UNIQUE INDEX "external_ids_imdb_id_idx" ON "external_ids" ("imdb_id");
        END IF;

        -- Índices para image y translation
        IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'image_actor_id_idx') THEN
        CREATE INDEX "image_actor_id_idx" ON "image" ("actor_id");
        END IF;

        IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'translation_actor_id_iso_3166_1_iso_639_1_idx') THEN
        CREATE INDEX "translation_actor_id_iso_3166_1_iso_639_1_idx" ON "translation" ("actor_id", "iso_3166_1", "iso_639_1");
        END IF;

        -- Índices para users y user_profiles
        IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'users_email_idx') THEN
        CREATE INDEX "users_email_idx" ON "users" ("email");
        END IF;

        IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'users_phone_number_idx') THEN
        CREATE INDEX "users_phone_number_idx" ON "users" ("phone_number");
        END IF;

        IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'user_profiles_country_idx') THEN
        CREATE INDEX "user_profiles_country_idx" ON "user_profiles" ("country");
        END IF;

        IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'user_profiles_username_idx') THEN
        CREATE UNIQUE INDEX "user_profiles_username_idx" ON "user_profiles" ("username");
        END IF;

        -- Índices para user_auth_providers y sessions
        IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'user_auth_providers_user_id_idx') THEN
        CREATE INDEX "user_auth_providers_user_id_idx" ON "user_auth_providers" ("user_id");
        END IF;

        IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'user_auth_providers_provider_provider_id_idx') THEN
        CREATE UNIQUE INDEX "user_auth_providers_provider_provider_id_idx" ON "user_auth_providers" ("provider", "provider_id");
        END IF;

        IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'sessions_user_id_idx') THEN
        CREATE INDEX "sessions_user_id_idx" ON "sessions" ("user_id");
        END IF;

        IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'sessions_session_token_idx') THEN
        CREATE UNIQUE INDEX "sessions_session_token_idx" ON "sessions" ("session_token");
        END IF;

        -- Índices para actividades
        IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'activities_user_id_idx') THEN
        CREATE INDEX "activities_user_id_idx" ON "activities" ("user_id");
        END IF;

        IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'activities_session_id_idx') THEN
        CREATE INDEX "activities_session_id_idx" ON "activities" ("session_id");
        END IF;

        -- Índices para user_roles y login_attempts
        IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'user_roles_user_id_role_idx') THEN
        CREATE INDEX "user_roles_user_id_role_idx" ON "user_roles" ("user_id", "role");
        END IF;

        IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'login_attempts_user_id_idx') THEN
        CREATE INDEX "login_attempts_user_id_idx" ON "login_attempts" ("user_id");
        END IF;

        -- Índices para login_attempts
        IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'login_attempts_ip_address_idx') THEN
        CREATE INDEX "login_attempts_ip_address_idx" ON "login_attempts" ("ip_address");
        END IF;

        IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'login_attempts_success_idx') THEN
        CREATE INDEX "login_attempts_success_idx" ON "login_attempts" ("success");
        END IF;

        -- Índices para Transactions
        IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'Transactions_user_id_idx') THEN
        CREATE INDEX "Transactions_user_id_idx" ON "Transactions" ("user_id");
        END IF;

        IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'Transactions_status_idx') THEN
        CREATE INDEX "Transactions_status_idx" ON "Transactions" ("status");
        END IF;

        IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'Transactions_purchase_type_idx') THEN
        CREATE INDEX "Transactions_purchase_type_idx" ON "Transactions" ("purchase_type");
        END IF;

        -- Índices para Watch_Provider_Transactions
        IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'Watch_Provider_Transactions_user_id_idx') THEN
        CREATE INDEX "Watch_Provider_Transactions_user_id_idx" ON "Watch_Provider_Transactions" ("user_id");
        END IF;

        IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'Watch_Provider_Transactions_watch_provider_id_idx') THEN
        CREATE INDEX "Watch_Provider_Transactions_watch_provider_id_idx" ON "Watch_Provider_Transactions" ("watch_provider_id");
        END IF;

        IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'Watch_Provider_Transactions_status_idx') THEN
        CREATE INDEX "Watch_Provider_Transactions_status_idx" ON "Watch_Provider_Transactions" ("status");
        END IF;

        -- Índices para Video_Engagement
        IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'Video_Engagement_user_id_video_id_idx') THEN
        CREATE INDEX "Video_Engagement_user_id_video_id_idx" ON "Video_Engagement" ("user_id", "video_id");
        END IF;

        IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'Video_Engagement_liked_idx') THEN
        CREATE INDEX "Video_Engagement_liked_idx" ON "Video_Engagement" ("liked");
        END IF;

        -- Índices para Video_Comments
        IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'Video_Comments_engagement_id_idx') THEN
        CREATE INDEX "Video_Comments_engagement_id_idx" ON "Video_Comments" ("engagement_id");
        END IF;

        IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'Video_Comments_comment_date_idx') THEN
        CREATE INDEX "Video_Comments_comment_date_idx" ON "Video_Comments" ("comment_date");
        END IF;

        -- Índices para Video_Views
        IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'Video_Views_user_id_video_id_idx') THEN
        CREATE INDEX "Video_Views_user_id_video_id_idx" ON "Video_Views" ("user_id", "video_id");
        END IF;

        IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'Video_Views_view_date_idx') THEN
        CREATE INDEX "Video_Views_view_date_idx" ON "Video_Views" ("view_date");
        END IF;

        -- Índices para surveys
        IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'surveys_movie_id_idx') THEN
        CREATE INDEX "surveys_movie_id_idx" ON "surveys" ("movie_id");
        END IF;

        IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'surveys_created_at_idx') THEN
        CREATE INDEX "surveys_created_at_idx" ON "surveys" ("created_at");
        END IF;

        -- Índices para survey_attempts
        IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'survey_attempts_user_id_idx') THEN
        CREATE INDEX "survey_attempts_user_id_idx" ON "survey_attempts" ("user_id");
        END IF;

        IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'survey_attempts_survey_id_idx') THEN
        CREATE INDEX "survey_attempts_survey_id_idx" ON "survey_attempts" ("survey_id");
        END IF;

        IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'survey_attempts_completed_idx') THEN
        CREATE INDEX "survey_attempts_completed_idx" ON "survey_attempts" ("completed");
        END IF;

        -- Índices para questions
        IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'questions_survey_id_idx') THEN
        CREATE INDEX "questions_survey_id_idx" ON "questions" ("survey_id");
        END IF;

        IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'questions_type_idx') THEN
        CREATE INDEX "questions_type_idx" ON "questions" ("type");
        END IF;

        -- Índices para options
        IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'options_question_id_idx') THEN
        CREATE INDEX "options_question_id_idx" ON "options" ("question_id");
        END IF;

        IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'options_is_correct_idx') THEN
        CREATE INDEX "options_is_correct_idx" ON "options" ("is_correct");
        END IF;

        END $$;
      `);

    await client.query(`
        DO $$ 
        BEGIN
          -- Añadir claves foráneas para Movie_Genres
          IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'movie_genres_movie_id_fkey') THEN
            ALTER TABLE "Movie_Genres" ADD FOREIGN KEY ("movie_id") REFERENCES "Movies" ("id");
          END IF;
          
          IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'movie_genres_genre_id_fkey') THEN
            ALTER TABLE "Movie_Genres" ADD FOREIGN KEY ("genre_id") REFERENCES "Genres" ("id");
          END IF;
          
          -- Añadir claves foráneas para Movie_Production_Companies
          IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'movie_production_companies_movie_id_fkey') THEN
            ALTER TABLE "Movie_Production_Companies" ADD FOREIGN KEY ("movie_id") REFERENCES "Movies" ("id");
          END IF;
      
          IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'movie_production_companies_company_id_fkey') THEN
            ALTER TABLE "Movie_Production_Companies" ADD FOREIGN KEY ("company_id") REFERENCES "Production_Companies" ("id");
          END IF;
          
          -- Añadir claves foráneas para Movie_Production_Countries
          IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'movie_production_countries_movie_id_fkey') THEN
            ALTER TABLE "Movie_Production_Countries" ADD FOREIGN KEY ("movie_id") REFERENCES "Movies" ("id");
          END IF;
      
          IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'movie_production_countries_country_iso_fkey') THEN
            ALTER TABLE "Movie_Production_Countries" ADD FOREIGN KEY ("country_iso") REFERENCES "Production_Countries" ("iso_3166_1");
          END IF;
      
          -- Añadir claves foráneas para Movie_Spoken_Languages
          IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'movie_spoken_languages_movie_id_fkey') THEN
            ALTER TABLE "Movie_Spoken_Languages" ADD FOREIGN KEY ("movie_id") REFERENCES "Movies" ("id");
          END IF;
      
          IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'movie_spoken_languages_language_iso_fkey') THEN
            ALTER TABLE "Movie_Spoken_Languages" ADD FOREIGN KEY ("language_iso") REFERENCES "Spoken_Languages" ("iso_639_1");
          END IF;
      
          -- Añadir claves foráneas para Images
          IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'images_movie_id_fkey') THEN
            ALTER TABLE "Images" ADD FOREIGN KEY ("movie_id") REFERENCES "Movies" ("id");
          END IF;
      
          -- Añadir claves foráneas para Recommendations
          IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'recommendations_movie_id_fkey') THEN
            ALTER TABLE "Recommendations" ADD FOREIGN KEY ("movie_id") REFERENCES "Movies" ("id");
          END IF;
      
          -- Añadir claves foráneas para Movie_Keywords
          IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'movie_keywords_movie_id_fkey') THEN
            ALTER TABLE "Movie_Keywords" ADD FOREIGN KEY ("movie_id") REFERENCES "Movies" ("id");
          END IF;
      
          IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'movie_keywords_keyword_id_fkey') THEN
            ALTER TABLE "Movie_Keywords" ADD FOREIGN KEY ("keyword_id") REFERENCES "Keywords" ("id");
          END IF;

          -- Añadir claves foráneas para External_Ids
    IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'external_ids_movie_id_fkey') THEN
      ALTER TABLE "External_Ids" ADD FOREIGN KEY ("movie_id") REFERENCES "Movies" ("id");
    END IF;

    -- Añadir claves foráneas para Watch_Providers
    IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'watch_providers_movie_id_fkey') THEN
      ALTER TABLE "Watch_Providers" ADD FOREIGN KEY ("movie_id") REFERENCES "Movies" ("id");
    END IF;

    IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'watch_providers_country_iso_fkey') THEN
      ALTER TABLE "Watch_Providers" ADD FOREIGN KEY ("country_iso") REFERENCES "Countries" ("iso_3166_1");
    END IF;

    IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'watch_providers_provider_id_fkey') THEN
      ALTER TABLE "Watch_Providers" ADD FOREIGN KEY ("provider_id") REFERENCES "Providers" ("id");
    END IF;

    -- Añadir claves foráneas para Watch_Provider_Qualities
    IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'watch_provider_qualities_watch_provider_id_fkey') THEN
      ALTER TABLE "Watch_Provider_Qualities" ADD FOREIGN KEY ("watch_provider_id") REFERENCES "Watch_Providers" ("id");
    END IF;

    -- Añadir claves foráneas para Videos
    IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'videos_author_id_fkey') THEN
      ALTER TABLE "Videos" ADD FOREIGN KEY ("author_id") REFERENCES "Authors" ("uid");
    END IF;

    IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'videos_music_id_fkey') THEN
      ALTER TABLE "Videos" ADD FOREIGN KEY ("music_id") REFERENCES "Music" ("id");
    END IF;

    IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'videos_detail_id_fkey') THEN
      ALTER TABLE "Videos" ADD FOREIGN KEY ("detail_id") REFERENCES "Movies" ("id");
    END IF;

    -- Añadir claves foráneas para Hashtags
    IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'hashtags_video_id_fkey') THEN
      ALTER TABLE "Hashtags" ADD FOREIGN KEY ("video_id") REFERENCES "Videos" ("id");
    END IF;

    -- Añadir claves foráneas para Cast
    IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'cast_actor_id_fkey') THEN
      ALTER TABLE "Cast" ADD FOREIGN KEY ("actor_id") REFERENCES "people" ("id");
    END IF;

    IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'cast_movie_id_fkey') THEN
      ALTER TABLE "Cast" ADD FOREIGN KEY ("movie_id") REFERENCES "Movies" ("id");
    END IF;

    -- Añadir claves foráneas para External_Ids (people_id)
    IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'external_ids_people_id_fkey') THEN
      ALTER TABLE "external_ids" ADD FOREIGN KEY ("people_id") REFERENCES "people" ("id");
    END IF;

    -- Añadir claves foráneas para image
    IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'image_actor_id_fkey') THEN
      ALTER TABLE "image" ADD FOREIGN KEY ("actor_id") REFERENCES "people" ("id");
    END IF;

    -- Añadir claves foráneas para translation
    IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'translation_actor_id_fkey') THEN
      ALTER TABLE "translation" ADD FOREIGN KEY ("actor_id") REFERENCES "people" ("id");
    END IF;

    -- Añadir claves foráneas para user_auth_providers
    IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'user_auth_providers_user_id_fkey') THEN
      ALTER TABLE "user_auth_providers" ADD FOREIGN KEY ("user_id") REFERENCES "users" ("id");
    END IF;

    -- Añadir claves foráneas para user_profiles
    IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'user_profiles_user_id_fkey') THEN
      ALTER TABLE "user_profiles" ADD FOREIGN KEY ("user_id") REFERENCES "users" ("id");
    END IF;

    -- Añadir claves foráneas para sessions
    IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'sessions_user_id_fkey') THEN
      ALTER TABLE "sessions" ADD FOREIGN KEY ("user_id") REFERENCES "users" ("id");
    END IF;

    -- Añadir claves foráneas para activities
    IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'activities_user_id_fkey') THEN
      ALTER TABLE "activities" ADD FOREIGN KEY ("user_id") REFERENCES "users" ("id");
    END IF;

    IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'activities_session_id_fkey') THEN
      ALTER TABLE "activities" ADD FOREIGN KEY ("session_id") REFERENCES "sessions" ("id");
    END IF;

    -- Añadir claves foráneas para user_roles
    IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'user_roles_user_id_fkey') THEN
      ALTER TABLE "user_roles" ADD FOREIGN KEY ("user_id") REFERENCES "users" ("id");
    END IF;

    -- Añadir claves foráneas para login_attempts
    IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'login_attempts_user_id_fkey') THEN
      ALTER TABLE "login_attempts" ADD FOREIGN KEY ("user_id") REFERENCES "users" ("id");
    END IF;

        -- Añadir claves foráneas para Transactions
    IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'transactions_user_id_fkey') THEN
      ALTER TABLE "Transactions" ADD FOREIGN KEY ("user_id") REFERENCES "users" ("id");
    END IF;

    -- Añadir claves foráneas para Watch_Provider_Transactions
    IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'watch_provider_transactions_user_id_fkey') THEN
      ALTER TABLE "Watch_Provider_Transactions" ADD FOREIGN KEY ("user_id") REFERENCES "users" ("id");
    END IF;

    IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'watch_provider_transactions_watch_provider_id_fkey') THEN
      ALTER TABLE "Watch_Provider_Transactions" ADD FOREIGN KEY ("watch_provider_id") REFERENCES "Watch_Providers" ("id");
    END IF;

    -- Añadir claves foráneas para Video_Engagement
    IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'video_engagement_user_id_fkey') THEN
      ALTER TABLE "Video_Engagement" ADD FOREIGN KEY ("user_id") REFERENCES "users" ("id");
    END IF;

    IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'video_engagement_video_id_fkey') THEN
      ALTER TABLE "Video_Engagement" ADD FOREIGN KEY ("video_id") REFERENCES "Videos" ("id");
    END IF;

    -- Añadir claves foráneas para Video_Comments
    IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'video_comments_engagement_id_fkey') THEN
      ALTER TABLE "Video_Comments" ADD FOREIGN KEY ("engagement_id") REFERENCES "Video_Engagement" ("id");
    END IF;

    -- Añadir claves foráneas para Video_Views
    IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'video_views_user_id_fkey') THEN
      ALTER TABLE "Video_Views" ADD FOREIGN KEY ("user_id") REFERENCES "users" ("id");
    END IF;

    IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'video_views_video_id_fkey') THEN
      ALTER TABLE "Video_Views" ADD FOREIGN KEY ("video_id") REFERENCES "Videos" ("id");
    END IF;

    -- Añadir claves foráneas para Surveys
    IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'surveys_movie_id_fkey') THEN
      ALTER TABLE "surveys" ADD FOREIGN KEY ("movie_id") REFERENCES "Movies" ("id");
    END IF;

    -- Añadir claves foráneas para survey_attempts
    IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'survey_attempts_user_id_fkey') THEN
      ALTER TABLE "survey_attempts" ADD FOREIGN KEY ("user_id") REFERENCES "users" ("id");
    END IF;

    IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'survey_attempts_survey_id_fkey') THEN
      ALTER TABLE "survey_attempts" ADD FOREIGN KEY ("survey_id") REFERENCES "surveys" ("id");
    END IF;

    -- Añadir claves foráneas para Questions
    IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'questions_survey_id_fkey') THEN
      ALTER TABLE "questions" ADD FOREIGN KEY ("survey_id") REFERENCES "surveys" ("id");
    END IF;

    -- Añadir claves foráneas para Options
    IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'options_question_id_fkey') THEN
      ALTER TABLE "options" ADD FOREIGN KEY ("question_id") REFERENCES "questions" ("id");
    END IF;
    
        END $$;
      `);

    console.log("Datos de ejemplo insertados correctamente.");
  } catch (err) {
    console.error("Error al insertar los datos de ejemplo:", err);
  } finally {
    await client.end();
  }
};

createAndInsertData();
